// //----------------------
// // <auto-generated>
// //     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// // </auto-generated>
// //----------------------

// /* tslint:disable */
// /* eslint-disable */
// // ReSharper disable InconsistentNaming

// import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
// import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
// import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
// import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

// export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

// @Injectable({
//     providedIn: 'root'
// })
// export class SkillCategoriesClient {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ?? "";
//     }

//     /**
//      * @param id (optional)
//      * @return OK
//      */
//     skillCategoriesGet(id: number | undefined): Observable<SkillCategoryItem> {
//         let url_ = this.baseUrl + "/api/skill-categories?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "Id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillCategoriesGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillCategoriesGet(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillCategoryItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillCategoryItem>;
//         }));
//     }

//     protected processSkillCategoriesGet(response: HttpResponseBase): Observable<SkillCategoryItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillCategoryItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillCategoryItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     skillCategoriesPut(body: SkillCategoryCreateRequest | undefined): Observable<SkillCategoryItem> {
//         let url_ = this.baseUrl + "/api/skill-categories";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillCategoriesPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillCategoriesPut(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillCategoryItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillCategoryItem>;
//         }));
//     }

//     protected processSkillCategoriesPut(response: HttpResponseBase): Observable<SkillCategoryItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillCategoryItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillCategoryItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     skillCategoriesPost(body: SkillCategoryUpdateRequest | undefined): Observable<SkillCategoryItem> {
//         let url_ = this.baseUrl + "/api/skill-categories";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillCategoriesPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillCategoriesPost(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillCategoryItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillCategoryItem>;
//         }));
//     }

//     protected processSkillCategoriesPost(response: HttpResponseBase): Observable<SkillCategoryItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillCategoryItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillCategoryItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     toggleActivity(body: SkillCategoryChangeActiveRequest | undefined): Observable<SkillCategoryItem> {
//         let url_ = this.baseUrl + "/api/skill-categories/toggle-activity";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processToggleActivity(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processToggleActivity(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillCategoryItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillCategoryItem>;
//         }));
//     }

//     protected processToggleActivity(response: HttpResponseBase): Observable<SkillCategoryItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillCategoryItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillCategoryItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     query(body: SkillTreeFilter | undefined): Observable<SkillTreeItem[]> {
//         let url_ = this.baseUrl + "/api/skill/query";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processQuery(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processQuery(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillTreeItem[]>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillTreeItem[]>;
//         }));
//     }

//     protected processQuery(response: HttpResponseBase): Observable<SkillTreeItem[]> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillTreeItem[];
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf(null as SkillTreeItem[]);
//     }
// }

// @Injectable({
//     providedIn: 'root'
// })
// export class SkillLevelsClient {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ?? "";
//     }

//     /**
//      * @param id (optional)
//      * @return OK
//      */
//     skillLevelsGet(id: number | undefined): Observable<SkillLevelItem> {
//         let url_ = this.baseUrl + "/api/skill-levels?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "Id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillLevelsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillLevelsGet(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillLevelItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillLevelItem>;
//         }));
//     }

//     protected processSkillLevelsGet(response: HttpResponseBase): Observable<SkillLevelItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillLevelItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillLevelItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     skillLevelsPut(body: SkillLevelCreateRequest | undefined): Observable<SkillLevelItem> {
//         let url_ = this.baseUrl + "/api/skill-levels";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillLevelsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillLevelsPut(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillLevelItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillLevelItem>;
//         }));
//     }

//     protected processSkillLevelsPut(response: HttpResponseBase): Observable<SkillLevelItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillLevelItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillLevelItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     skillLevelsPost(body: SkillLevelUpdateRequest | undefined): Observable<SkillLevelItem> {
//         let url_ = this.baseUrl + "/api/skill-levels";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillLevelsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillLevelsPost(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillLevelItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillLevelItem>;
//         }));
//     }

//     protected processSkillLevelsPost(response: HttpResponseBase): Observable<SkillLevelItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillLevelItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillLevelItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     toggleActivity(body: SkillLevelChangeActiveRequest | undefined): Observable<SkillLevelItem> {
//         let url_ = this.baseUrl + "/api/skill-levels/toggle-activity";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processToggleActivity(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processToggleActivity(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillLevelItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillLevelItem>;
//         }));
//     }

//     protected processToggleActivity(response: HttpResponseBase): Observable<SkillLevelItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillLevelItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillLevelItem>(null as any);
//     }
// }

// @Injectable({
//     providedIn: 'root'
// })
// export class SkillsClient {
//     private http: HttpClient;
//     private baseUrl: string;
//     protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

//     constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
//         this.http = http;
//         this.baseUrl = baseUrl ?? "";
//     }

//     /**
//      * @param id (optional)
//      * @return OK
//      */
//     skillsGet(id: number | undefined): Observable<SkillItem> {
//         let url_ = this.baseUrl + "/api/skills?";
//         if (id === null)
//             throw new Error("The parameter 'id' cannot be null.");
//         else if (id !== undefined)
//             url_ += "Id=" + encodeURIComponent("" + id) + "&";
//         url_ = url_.replace(/[?&]$/, "");

//         let options_ : any = {
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillsGet(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillsGet(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillItem>;
//         }));
//     }

//     protected processSkillsGet(response: HttpResponseBase): Observable<SkillItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     skillsPost(body: SkillUpdateRequest | undefined): Observable<SkillItem> {
//         let url_ = this.baseUrl + "/api/skills";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillsPost(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillsPost(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillItem>;
//         }));
//     }

//     protected processSkillsPost(response: HttpResponseBase): Observable<SkillItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     skillsPut(body: SkillCreateRequest | undefined): Observable<SkillItem> {
//         let url_ = this.baseUrl + "/api/skills";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processSkillsPut(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processSkillsPut(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillItem>;
//         }));
//     }

//     protected processSkillsPut(response: HttpResponseBase): Observable<SkillItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillItem>(null as any);
//     }

//     /**
//      * @param body (optional)
//      * @return OK
//      */
//     toggleActivity(body: SkillChangeActiveRequest | undefined): Observable<SkillItem> {
//         let url_ = this.baseUrl + "/api/skills/toggle-activity";
//         url_ = url_.replace(/[?&]$/, "");

//         const content_ = JSON.stringify(body);

//         let options_ : any = {
//             body: content_,
//             observe: "response",
//             responseType: "blob",
//             headers: new HttpHeaders({
//                 "Content-Type": "application/json",
//                 "Accept": "application/json"
//             })
//         };

//         return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
//             return this.processToggleActivity(response_);
//         })).pipe(_observableCatch((response_: any) => {
//             if (response_ instanceof HttpResponseBase) {
//                 try {
//                     return this.processToggleActivity(response_ as any);
//                 } catch (e) {
//                     return _observableThrow(e) as any as Observable<SkillItem>;
//                 }
//             } else
//                 return _observableThrow(response_) as any as Observable<SkillItem>;
//         }));
//     }

//     protected processToggleActivity(response: HttpResponseBase): Observable<SkillItem> {
//         const status = response.status;
//         const responseBlob =
//             response instanceof HttpResponse ? response.body :
//             (response as any).error instanceof Blob ? (response as any).error : undefined;

//         let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
//         if (status === 200) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             let result200: any = null;
//             result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as SkillItem;
//             return _observableOf(result200);
//             }));
//         } else if (status !== 200 && status !== 204) {
//             return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
//             return throwException("An unexpected server error occurred.", status, _responseText, _headers);
//             }));
//         }
//         return _observableOf<SkillItem>(null as any);
//     }
// }

// export enum IncludeActiveOption {
//     None = "None",
//     IncludeOnlyActive = "IncludeOnlyActive",
//     IncludeOnlyInactive = "IncludeOnlyInactive",
//     IncludeAll = "IncludeAll",
// }

// export enum SkillAggregationLevel {
//     None = "None",
//     SkillCategory = "SkillCategory",
//     Skill = "Skill",
//     SkillLevel = "SkillLevel",
// }

// export interface SkillCategoryChangeActiveRequest {
//     ToUpdate?: SkillCategorySelector;
//     IsActive?: boolean | undefined;
// }

// export interface SkillCategoryCreateRequest {
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
// }

// export interface SkillCategoryItem {
//     Id?: number;
//     IsActive?: boolean;
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     Items?: SkillItem[] | undefined;
//     NodeType?: SkillAggregationLevel;
// }

// export interface SkillCategorySelector {
//     Id?: number | undefined;
// }

// export interface SkillCategoryUpdateRequest {
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     IsActive?: boolean | undefined;
//     ToUpdate?: SkillCategorySelector;
// }

// export interface SkillChangeActiveRequest {
//     ToUpdate?: SkillSelector;
//     IsActive?: boolean | undefined;
// }

// export interface SkillCreateRequest {
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     Parent?: SkillCategorySelector;
// }

// export interface SkillItem {
//     Id?: number;
//     IsActive?: boolean;
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     Items?: SkillLevelItem[] | undefined;
//     NodeType?: SkillAggregationLevel;
// }

// export interface SkillLevelChangeActiveRequest {
//     ToUpdate?: SkillLevelSelector;
//     IsActive?: boolean | undefined;
// }

// export interface SkillLevelCreateRequest {
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     Description?: string | undefined;
//     Weight?: number | undefined;
//     Parent?: SkillSelector;
// }

// export interface SkillLevelItem {
//     Id?: number;
//     IsActive?: boolean;
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     Weight?: number;
//     Description?: string | undefined;
//     Prerequisites?: SkillLevelPrerequisiteItem[] | undefined;
//     NodeType?: SkillAggregationLevel;
// }

// export interface SkillLevelPrerequisiteItem {
//     PrerequisiteId?: number;
//     RequiredSkillId?: number;
// }

// export interface SkillLevelSelector {
//     Id?: number | undefined;
// }

// export interface SkillLevelUpdateRequest {
//     ToUpdate?: SkillLevelSelector;
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     IsActive?: boolean | undefined;
//     Description?: string | undefined;
//     Weight?: number | undefined;
// }

// export interface SkillSelector {
//     Id?: number | undefined;
// }

// export interface SkillTreeFilter {
//     IncludeActive?: IncludeActiveOption;
// }

// export interface SkillTreeItem {
//     Id?: number;
//     Name?: string | undefined;
//     IsActive?: boolean;
//     NodeType?: SkillAggregationLevel;
//     Items?: SkillTreeItem[] | undefined;
// }

// export interface SkillUpdateRequest {
//     ToUpdate?: SkillSelector;
//     Name?: string | undefined;
//     ShortDescription?: string | undefined;
//     IsActive?: boolean | undefined;
// }

// export class ApiException extends Error {
//     override message: string;
//     status: number;
//     response: string;
//     headers: { [key: string]: any; };
//     result: any;

//     constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
//         super();

//         this.message = message;
//         this.status = status;
//         this.response = response;
//         this.headers = headers;
//         this.result = result;
//     }

//     protected isApiException = true;

//     static isApiException(obj: any): obj is ApiException {
//         return obj.isApiException === true;
//     }
// }

// function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
//     if (result !== null && result !== undefined)
//         return _observableThrow(result);
//     else
//         return _observableThrow(new ApiException(message, status, response, headers, null));
// }

// function blobToText(blob: any): Observable<string> {
//     return new Observable<string>((observer: any) => {
//         if (!blob) {
//             observer.next("");
//             observer.complete();
//         } else {
//             let reader = new FileReader();
//             reader.onload = event => {
//                 observer.next((event.target as any).result);
//                 observer.complete();
//             };
//             reader.readAsText(blob);
//         }
//     });
// }
