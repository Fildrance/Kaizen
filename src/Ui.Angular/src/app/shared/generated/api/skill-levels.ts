/**
 * Kaizen.Skills.Service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: latest
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { SkillLevelChangeActiveRequest } from '../model/skill-level-change-active-request';
import { SkillLevelCreateRequest } from '../model/skill-level-create-request';
import { SkillLevelItem } from '../model/skill-level-item';
import { SkillLevelPrerequisiteAttachRequest } from '../model/skill-level-prerequisite-attach-request';
import { SkillLevelPrerequisiteDetachRequest } from '../model/skill-level-prerequisite-detach-request';
import { SkillLevelPrerequisiteItem } from '../model/skill-level-prerequisite-item';
import { SkillLevelPrerequisiteItemPage } from '../model/skill-level-prerequisite-item-page';
import { SkillLevelUpdateRequest } from '../model/skill-level-update-request';
import { Unit } from '../model/unit';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SkillLevelsService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attach(body?: SkillLevelPrerequisiteAttachRequest, observe?: 'body', reportProgress?: boolean): Observable<SkillLevelPrerequisiteItem>;
    public attach(body?: SkillLevelPrerequisiteAttachRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillLevelPrerequisiteItem>>;
    public attach(body?: SkillLevelPrerequisiteAttachRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillLevelPrerequisiteItem>>;
    public attach(body?: SkillLevelPrerequisiteAttachRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SkillLevelPrerequisiteItem>('post',`${this.basePath}/api/skill-levels/prerequisite-attach`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeActive(body?: SkillLevelChangeActiveRequest, observe?: 'body', reportProgress?: boolean): Observable<SkillLevelItem>;
    public changeActive(body?: SkillLevelChangeActiveRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillLevelItem>>;
    public changeActive(body?: SkillLevelChangeActiveRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillLevelItem>>;
    public changeActive(body?: SkillLevelChangeActiveRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SkillLevelItem>('post',`${this.basePath}/api/skill-levels/toggle-activity`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create(body?: SkillLevelCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<SkillLevelItem>;
    public create(body?: SkillLevelCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillLevelItem>>;
    public create(body?: SkillLevelCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillLevelItem>>;
    public create(body?: SkillLevelCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SkillLevelItem>('put',`${this.basePath}/api/skill-levels`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public detach(body?: SkillLevelPrerequisiteDetachRequest, observe?: 'body', reportProgress?: boolean): Observable<Unit>;
    public detach(body?: SkillLevelPrerequisiteDetachRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Unit>>;
    public detach(body?: SkillLevelPrerequisiteDetachRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Unit>>;
    public detach(body?: SkillLevelPrerequisiteDetachRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Unit>('post',`${this.basePath}/api/skill-levels/prerequisite-detach`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param Id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public find(Id?: number, observe?: 'body', reportProgress?: boolean): Observable<SkillLevelItem>;
    public find(Id?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillLevelItem>>;
    public find(Id?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillLevelItem>>;
    public find(Id?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (Id !== undefined && Id !== null) {
            queryParameters = queryParameters.set('Id', <any>Id);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SkillLevelItem>('get',`${this.basePath}/api/skill-levels`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param IncludeOnlyBoundWithActiveSkillLevels 
     * @param Take 
     * @param Skip 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public queryPrerequisites(IncludeOnlyBoundWithActiveSkillLevels: boolean, Take?: number, Skip?: number, observe?: 'body', reportProgress?: boolean): Observable<SkillLevelPrerequisiteItemPage>;
    public queryPrerequisites(IncludeOnlyBoundWithActiveSkillLevels: boolean, Take?: number, Skip?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillLevelPrerequisiteItemPage>>;
    public queryPrerequisites(IncludeOnlyBoundWithActiveSkillLevels: boolean, Take?: number, Skip?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillLevelPrerequisiteItemPage>>;
    public queryPrerequisites(IncludeOnlyBoundWithActiveSkillLevels: boolean, Take?: number, Skip?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (IncludeOnlyBoundWithActiveSkillLevels === null || IncludeOnlyBoundWithActiveSkillLevels === undefined) {
            throw new Error('Required parameter IncludeOnlyBoundWithActiveSkillLevels was null or undefined when calling queryPrerequisites.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (IncludeOnlyBoundWithActiveSkillLevels !== undefined && IncludeOnlyBoundWithActiveSkillLevels !== null) {
            queryParameters = queryParameters.set('IncludeOnlyBoundWithActiveSkillLevels', <any>IncludeOnlyBoundWithActiveSkillLevels);
        }
        if (Take !== undefined && Take !== null) {
            queryParameters = queryParameters.set('Take', <any>Take);
        }
        if (Skip !== undefined && Skip !== null) {
            queryParameters = queryParameters.set('Skip', <any>Skip);
        }

        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SkillLevelPrerequisiteItemPage>('get',`${this.basePath}/api/skill-levels/prerequisites`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public update(body?: SkillLevelUpdateRequest, observe?: 'body', reportProgress?: boolean): Observable<SkillLevelItem>;
    public update(body?: SkillLevelUpdateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SkillLevelItem>>;
    public update(body?: SkillLevelUpdateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SkillLevelItem>>;
    public update(body?: SkillLevelUpdateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // authentication (Bearer) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SkillLevelItem>('post',`${this.basePath}/api/skill-levels`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
